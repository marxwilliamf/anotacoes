Listar arquivos commitados em um commit:

git diff-tree --no-commit-id --name-only -r <hash_do_commit>

##########################

We recommend every repository include a README, LICENSE, and .gitignore.

git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/MarxWilliam/xxxxxxxxxxxx.git
git push -u origin master

///////////////////////
git pull <remote> <branch>
git branch --set-upstream-to=origin/<branch> main
///////////////////////

…or push an existing repository from the command line

git remote add origin https://github.com/MarxWilliam/xxxxxxxxxx.git
git push -u origin master

//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//

git config --global user.name "William Felipe Marx"
git config --global user.email "marxwilliamf@gmail.com"

path global config on linux /home/user/.gitconfig
path para commits no github https://github.com/MarxWilliam/anotacoes/commits

git config user.name "William Felipe Marx"
git config user.email "marxwilliamf@gmail.com"

git config --global init.defaultBranch master

git config core.pager cat // mostra todos os logs de uma vez;
git config core.pager less // mostra só o que cabe na tela mostrando o : que é igual a continua "..." 

git config credential.helper store
git config --global --unset credential.helper

touch texto.txt
git init
git status
git add *
git add . // adiciona todos os arquivos do projeto.
git commit -a -m "Especificação do Commit"
git branch ramo2git
git log | git log --oneline | git log --graph | git log --graph --oneline
git graph --oneline

git checkout -b teste // cria um novo branch
git checkout master // retorna ao ramo master no HEAD do master
git checkout anotacoes.txt		//volta o arquivo para o estado do ultimo commit
git checkout -- . 			// antes de fazer git add esse comando volta ao estado do ultimo commit
git checkout -- NomeArquivo.java	// volta apenas este arquivo especificamente para o estado do ultimo commit
git checkout HEAD -- NomeArquivo.java	// Se ja fez o git add para o arquivo volta ele para o estado do ultimo commit
git checkout HEAD -- .			// volta todos os arquivos adicionados para o estado do ultimo commit
git reset HEAD --hard			//ainda não fez commit da alteração quer retornar para o ultimo commit 
//volta tudo que está mapeado para o ultimo commit 
//parece que o que não está mapeado não é alterado permanessendo como estava CONFERIR

git reset HEAD^ --hard    		//retorna para último commit após um commit já efetuado

git reset 5faab146c //apaga todos os commits depois desse e deixa o projeto como estava antes do comando, sem alterar nada.

git log --graph --oneline --all  // todos os ramos
git log -2 //mostra os dois ultimos commits "-n" últimos "n" commits
git log --oneline -2 //resumo últimos dois commitas
git log --before="28-06-2020" 			//mostra logs anteriores à esta data
git log --before="28-06-2020" -2 --oneline 	//mostra os 2 logs anteriores à esta data em uma linha
git log --before="1 week ago" -5		//mostra 5 logs anteriores a uma semana
git log --after="28-06-2020" 			//mostra logs posteriores à esta data
git log --after="1 week ago" 			//mostra logs de até uma semana atrás;
git log --since="2 weeks ago" 			// ou "2 days ago" ...
git diff --staged				//mostra diferença entre o arquivo atual e o ultimo commit // é preciso o arquivo estar staged //git add arquivoModificado.txt
git diff da4e7f8 				//diferença ente o head atual e o commit com essa hash da4e7f8
git diff 630cb9e 49bdd97			//diferença entre o commit 1 e 2, sendo o 1 o mais recente. 
// tanto faz a ordem ele mostra as diferenças, o que muda é como aparece a modificação, como adicionada ou removida
git diff 49bdd97..630cb9e 			//pode-se também utilizar ".." parece funcionar igual

git log --author "Will"

git help log //para ver opções


git log --no-merges
git log pasta/							   				//retorna todos os commits dessa pasta
git log pasta/arquivo.txt                 				//retorna todos os commits desse arquivo

git log -p pasta/ 						   				//mostra o pathches "pasta" com todos os commits e suas alterações detalhadas

git log --stat  						   				// mostra quais arquivos foram alteradoe em cada commit
git log --pretty=oneline --graph		   				// mostra doda a hash
git log --pretty=short					   				//mostra apenas o autor e a menssagem do commit sem a datas pode adicionar --graph
git log --pretty=format:'%h : %s' --graph 				// mostra o grafo com o hash e a menssagem
git log --pretty=format:'%h : %s' --topo-order --grap  //commits aparecerem em order topológica (ex.: commits descendentes são mostrados antes de seus pais).
git log --pretty=format:'%h : %s' --date-order --grap  //ordena por timestamp pore´m nenhum pai vem antes dos filhos, as linhas de desenvolvimento não são agrupadas juntas

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

git log

commit 62b04bebe9350e931da292b64ec4d4030ab5472a (HEAD -> master, origin/master, origin/HEAD)
Author: = <=>
Date:   Mon Dec 6 05:17:50 2021 -0300

    Atualizando.

commit da4e7f8f9e5ea017276f74c80c36cf9303b17787
Author: = <=>
Date:   Fri Nov 26 05:49:12 2021 -0300

    Novas Anotações.
: // <- nesses dois pontos posso escrever "/palavrapesquisa" para pesquisar uma palavra nos logs. // aperta "b" volta para a primeira ocorrência da palavra //"n" vai para próxima ocorrÊncia  // "q" sai.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Renomeando arquivo do projeto pelo Git mv serve para arquivos e diretórios

git mv Anotacoes_docker.txt Anotacoes_Docker.txt
git commit -m "Renomeado arquivo Docker;" // no caso não fiz esse commit mas seria asssim

/////////////////////

Renomeando na pasta ou editor -> anotacoes_diversas.txt para Anotacoes_Diversas.txt

git status

...


On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    Anotacoes_docker.txt -> Anotacoes_Docker.txt                         //como não tinha feito o commit anterior ele aparece assim

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Anotacoes_Git.txt
	deleted:    anotacoes_diversas.txt						//arquivo renomeado aparece como deletado

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	Anotacoes_Diversas.txt	
	
remover arquivos staged, para não ir para o commit
	use "git restore --staged <file>..." to unstage

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
///
	
git status

...


git add anotacoes_diversas.txt //

On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    Anotacoes_docker.txt -> Anotacoes_Docker.txt
	deleted:    anotacoes_diversas.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Anotacoes_Git.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	Anotacoes_Diversas.txt

							//aparece um novo arquivo para mapear

///

git add Anotacoes_Diversas.txt

...

On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    anotacoes_diversas.txt -> Anotacoes_Diversas.txt
	renamed:    Anotacoes_docker.txt -> Anotacoes_Docker.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Anotacoes_Git.txt



///

Remomei na pasta "anotacoes_maven.txt" para "Anotacoes_Maven.txt"

git add Anotacoes_Maven.txt
git status 

...

On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    anotacoes_diversas.txt -> Anotacoes_Diversas.txt
	renamed:    Anotacoes_docker.txt -> Anotacoes_Docker.txt
	new file:   Anotacoes_Maven.txt							//ainda aparece como novo arquivo

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Anotacoes_Git.txt
	deleted:    anotacoes_maven.txt							//ainda aparece como deletado

///

git add anotacoes_maven.txt 								//precisa adicionar o arquivo antigo para o git saber que ele não foi deletado.
git add Anotacoes_Git.txt
git status 

n branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	renamed:    anotacoes_diversas.txt -> Anotacoes_Diversas.txt
	renamed:    Anotacoes_docker.txt -> Anotacoes_Docker.txt
	modified:   Anotacoes_Git.txt
	renamed:    anotacoes_maven.txt -> Anotacoes_Maven.txt


///////////////////
///RESUMO

renomei anotacoes_kvm.txt na pasta

precisa fazer ambas as duas operações para ser equivalente eo comando git mv e estár pronto pra commit
git add anotacoes_kvm.txt
git add Anotacoes_KVM.txt

... basta dai fazer commit como em mv //no meu caso ainda tive que fazer //git add Anotacoes_Git.txt //pra ficar tudo atualizado.

git commit -m "Atualizando anotações Git e renomeando arquivos;"

//////////////////////

git rm rascunho2.txt //deleta o arquivo e deixa pronto pra commit //aparece listado com a cor verde

caso delete na pasta ele não fica pronto pra commit e aparece listado em vermelho necessitando fazer //git add rascunho2.txt // pra então ele ficar verde e poder ser commitado.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


git branch 			// lista os ramos existentes
git branch funcionalidadeA	// cria ramo funcionalidadeA
git branch funcionalidadeB	// cria ramo funcionalidadeB

git branch
git checkout funcionalidadeB

git branch 			//Ok
touch arquivoB.java

git checkout master		// volta pra master antes de fazer merge
git merge funcionalidadeB
git rebase funcionalidadeB


git checkout -b funcionalidadeC	// cria um branch novo e já entra nele de uma só vez


Deletando branches

git branch -d funcionalidadeA	// precisa ser feito merge antes de deletar o branch
git branch -D funcionalidadeA	// deleta o branch sen necessitar do merge,





:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Clonando Repositórios

git clone /home/alemao/Git/anotacoes			//clonando repositório de uma pasta
git clone /home/alemao/Git/anotacoes .			//clonando repositório de uma pasta dentro de uma pasta específica, sem criar diretorio próprio





git fetch						//baixa os arquivos de um repositorio remoto, não os mostra na pasta ainda
git rebase						// faz o rebase, e os arquivos baixados no rebase aparecem na pasta principal

git pull 						// equivalente a fazer git fetch e git rebase
	^O	+ Enter					//gravar      // "^" significa ctrl
	^X						//sair




git init --bare						// cria um repositório local centralizado, onde outros usuarios podem mandar seus commits como no github


git tag v1.0						// cria a tag v1.0
git tag							// lista as tags existentes
git push origin v1.0					// manda para repositorio originário (origin, remoto no github ou um bare) a tag v1.0
git pull						// o outro usuario precisa atualizar seu repositorio para ver a tag
git pull origin master					// forma mais especifica, repositorio remoto origin no branch master
git checkout v1.0					// (detached) desencaichado da cabeça (HEAD), não pode fazer commits numa tag
git switch -c novo-ramo-correcoes-v1.0					// para poder fazer commits posteriores a tag
git add novo_arquivo.java
git commit -m "Atualizando"
gir checkout master
gtt checkout -  //volta ao branch anterior
git rebase novo-ramo-correcoes-v1.0 | git merge	novo-ramo-correcoes-v1.0
git tag v1.1
git push origin v1.1


git cherry-pick <hash> 
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
git push --force -u origin master
git reset --hard HEAD									//ainda não fez commit da alteração quer retornar para o ultimo commit
git reset HEAD~1       									//apaga N commits, Não Modifica os arquivos da ṕasta,apaga apenas o histórico de log, o número após ~ diz quantos commits retroceder
git reset 8bb0fdb										//voltando o projeto para o commit 8bb0fdb perde tudo que foi feito após esse commit
git revert HEAD										//voltando para o commit anterior pode trocar o HEAD pela hash de qualquer commit

git revert 9cf2ff3 	// volta para o estado do commit indicado criando para isso um novo commit, preservando o commit que foi retrocedido no historico de logs para possíveis usos 
 
git add <file>
git add -p  //iterativo para separar alterações em commits diferentes
git reset <file>

git rm --cached <added_file_to_undo>

//atualiza o ultimo commit
git commit --amend -m "atualizando ultimo commit" //nesse caso pode-se fazer uma operação como add e então fazer um amend
git commit --amend --no-edit // Não altera a mensagem

 no ramos master -> git merge teste
 pode dar conflite mas abriu o processo para parar tem que dar uum git merge --abort
 pra continuar resolver o conflito e fazer um commit


git diff --cached //mostra modificações não adicionadas ao index	


Clear Git Cache using rm
	git rm --cached filename



 git remote //mostra repositórios remotos


 um repositório existente localmente
 git remote add origin http://......./git.git
 git push -u origin master				// manda ramo master para o repositorio remoto origin
 git remote -v						// lista repositorios remotos origin

 git push //manda pro repositório remoto


::::::::::::::::::::::::::::::
Trabalhando com Issues

Cada issue é identificada por #N

para fechar uma issue no commit basta colocar closes #n na mensagem do commit

git commit -m "Corrigido erro tal. Closes #1"

//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//=//

git config --help

git config --global core.editor gedit
git config --global user.name "William Marx"
git config --global user.email "marxwilliamf@gmail.com"

##################################################################################

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
# change the origin remote from https to ssh

git remote set-url origin git@github.com:<Username>/<Project>.git
git remote set-url origin https@github.com:<Username>/<Project>.git

##########

git remote set-url origin git://github.com/MarxWilliam/anotacoes.git
git remote set-url origin https://MarxWilliam@github.com/MarxWilliam/anotacoes.git //diz que o usuario a fazer a autenticaçãp dos commits é MarxWilliam

###############


SSH keypair setup for GitHub (or GitHub/GitLab/BitBucket, etc, etc)
Create a repo.
Make sure there is at least one file in it (even just the README.md)

Generate a SSH key pair (private/public):
ssh-keygen -t rsa -C "your_email@example.com"
or even better:

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Copy the contents of the public SSH key
macOS:
pbcopy < ~/.ssh/id_rsa.pub

GNU/Linux (requires the xclip package):
xclip -sel clip < ~/.ssh/id_rsa.pub
xclip -sel clip < /home/alemao/Git/william_id_rsa.pub

Windows Command Line:
type %userprofile%\.ssh\id_rsa.pub | clip

Git Bash on Windows / Windows PowerShell:

cat ~/.ssh/id_rsa.pub | clip
or ofcourse copy it via your favorite editor, cat, or whatever suits your needs :)

Copy the public SSH key to GitHub
Copy the contents of the to your SSH keys to your GitHub account settings (https://github.com/settings/keys).

Test the SSH key:
ssh -T git@github.com
Change directory into the local clone of your repository (if you're not already there) and run:

git remote set-url origin git@github.com:username/your-repository.git
Now try editing a file (try the README) and then do:

git add -A
git commit -am "Update README.md"
git push
You should not be asked for a username or password. If it works, your SSH key is correctly configured.


##################################################################################

ssh-keygen -t rsa -C seuemail@seuprovedor.com

ssh -T git@github.com 

mkdir key_backup

cp id_rsa* key_backup

m id_rsa*


git clone --bare PrimeirasJanelas /home/user/gitclone/PrimeirasJanelas.git


git add <arquivos...> 

git commit -m "comentário qualquer"
git commit -a -m "comentário qualquer" // -a faz com que todos os arquivos já rastreados com add pelo menos uma vez sejam comitados

 git push -u origin master
The authenticity of host 'github.com (192.30.253.112)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.

git config --global push.default current




##########################################################################

Instalando GItHub Cli no Linux Debian

Debian, Ubuntu Linux, Raspberry Pi OS (apt)
Install:

curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
sudo apt update
sudo apt install gh
Note: If you get the error "gpg: failed to start the dirmngr '/usr/bin/dirmngr': No such file or directory", try installing the dirmngr package: sudo apt install dirmngr.

Upgrade:

sudo apt update
sudo apt install gh


###########################################################################


Via OAuth and personal access tokens

We recommend you use OAuth tokens to authenticate to the GitHub API. OAuth tokens include personal access tokens and enable the user to revoke access at any time.

$ curl -u username:token https://api.github.com/user
This approach is useful if your tools only support Basic Authentication but you want to take advantage of OAuth access token security features.


###############################
Personal Access Token

Cria o token no site


Adicionando Repositório
	Cria Repositorio no site do GitHub como esse "wfm-algafood-api"

	No terminal linux:
	
		git init 	//inicializa o repositorio na pasta local com os códigos
		
		git remote add origin https://github.com/MarxWilliam/wfm-algafood-api.git

		faz um primeiro commit

		git push -u origin master

		Usa o Personal Access Token configurado no site, onde foi dados as permissões específicas e gerado um token que é usado como senha.




//////////////////////////////////////////////////////////////////////////////////////////////////////////
Explicações em: https://blog.betrybe.com/git/git-merge/
git merge -s recursive branch1 branch2

    ours
    theirs
    patient
    diff-algorithm=[patience|minimal|histogram|myers]
    renormalize
    no-renormalize
    no-renames
    find-renames[=<n>]
    subtree[=<caminho>]
    

git merge -s resolve branch1 branch2
git merge -s octopus branch1 branch2 branch3 branchN
git merge -s ours branch1 branch2 branchN
git merge -s subtree branchA branchB
git merge main --no-ff
git merge main --abort
git merge main --no-commit





////////////////////////////////////////////////////////////////////////////////////////

Juntar Repositorio abc ao xyz

cd xyz
git remote add abc /path/projeto/abc
git fetch abc --tags
git merge --allow-unrelated-histories abc/main
git remote remove abc


////////////////


cd pasta_projeto
git remote add TesteAdmissionalPraticoUbots ../eclipse-workspace/TesteAdmissionalPraticoUbots
git fetch TesteAdmissionalPraticoUbots
git merge --allow-unrelated-histories TesteAdmissionalPraticoUbots/master


/////////////////////

AutoCRLF

How to fix

The default value for core.autocrlf is selected during Git installation and stored in system-wide gitconfig 
(%ProgramFiles(x86)%\git\etc\gitconfig on Windows, /etc/gitconfig on Linux). 
Also there're (cascading in the following order):

"global" (per-user) gitconfig located at ~/.gitconfig, yet another
"global" (per-user) gitconfig at $XDG_CONFIG_HOME/git/config or $HOME/.config/git/config and
"local" (per-repo) gitconfig at .git/config in the working directory.

autocrlf = true if you have unix-style lf in one of your files (= RARELY),
autocrlf = input if you have win-style crlf in one of your files (= almost ALWAYS),
autocrlf = false – NEVER!

 – git config --system core.autocrlf false            # per-system solution
 – git config --global core.autocrlf false            # per-user solution
 – git config --local core.autocrlf false              # per-project solution

The warning "CRLF will be replaced by LF" says that you (having autocrlf=input) will lose your windows-style CRLF 
after a commit-checkout cycle (it will be replaced by unix-style LF). Don't use input under Windows.

1) true:                x -> LF -> CRLF
2) input:               x -> LF -> LF
3) false:               x -> x -> x
	-> file to commit -> repository -> checked out file
	
git config --global core.autocrlf true
git config --system core.autocrlf true


////////////////////////////////////////////////////////////////////////////////////////////////////////////////


git config --global color.ui false

color.branch
color.diff
color.interactive
color.status


git config --global color.diff.meta "blue black bold"


%USERPROFILE%\.minttyrc


BoldBlack=128,128,128
Red=255,64,40
BoldRed=255,128,64
Green=64,200,64
BoldGreen=64,255,64
Yellow=190,190,0
BoldYellow=255,255,64
Blue=0,128,255
BoldBlue=128,160,255
Magenta=200,64,255
BoldMagenta=255,128,255
Cyan=64,190,190
BoldCyan=128,255,255
White=200,200,200
BoldWhite=255,255,255

add the following line to the end of:
C:\Program Files\Git\etc\profile.d\git-prompt.sh

LS_COLORS=$LS_COLORS:'di=1;30:' ; export LS_COLORS

You may chose from these colors.

Black       0;30     Dark Gray     1;30
Blue        0;34     Light Blue    1;34
Green       0;32     Light Green   1;32
Cyan        0;36     Light Cyan    1;36
Red         0;31     Light Red     1;31
Purple      0;35     Light Purple  1;35
Brown       0;33     Yellow        1;33
Light Gray  0;37     White         1;37



////////////
WINDOWS

Git bash uses the default Windows console colors which may be tweaked in the registry. E.g. to increase readability, one can change the dark red and the dark magenta to a lighter version by applying the changes as indicated below:

Windows Registry Editor Version 5.00
; Default color scheme
; for Windows command prompt.

; Values stored as 00-BB-GG-RR
[HKEY_CURRENT_USER\Console]
; BLACK DGRAY
"ColorTable00"=dword:00000000
"ColorTable08"=dword:00808080
; BLUE LBLUE
"ColorTable01"=dword:00800000
"ColorTable09"=dword:00ff0000
; GREEN LGREEN
"ColorTable02"=dword:00008000
"ColorTable10"=dword:0000ff00
; CYAN LCYAN
"ColorTable03"=dword:00808000
"ColorTable11"=dword:00ffff00
; RED LRED --> To increase readability, use e.g. 000000aa for "ColorTable04"
"ColorTable04"=dword:00000080
"ColorTable12"=dword:000000ff
; MAGENTA LMAGENTA --> To increase readability, use e.g. 00aa00aa for "ColorTable05"
"ColorTable05"=dword:00800080
"ColorTable13"=dword:00ff00ff
; YELLOW LYELLOW
"ColorTable06"=dword:00008080
"ColorTable14"=dword:0000ffff
; LGRAY WHITE
"ColorTable07"=dword:00c0c0c0
"ColorTable15"=dword:00ffffff







//////////////////////////////////////////////////////////////////////////////////////////

Atualizando Branches


Crie outro branch a partir do MASTER atualizado;
Faça o git merge com o teu branch que quer continuar;
Assim, você vê se há algum conflito, verifica o código com as mudanças e tem um branch atualizado.

Primeiro, salva sua branch (em caso de qualquer problema) durante o seguinte:
git branch <branch_save> <branch>
Tenta trocar de rais da branch:

git rebase master <branch>
# OU
# Se você quiser trocar ordem dos commits ou apagar alguns:
git rebase -i master <branch>

O rais da branch sera master. Se tem conflitos, resolva-os e rebase --continue.

No fim, tera seu trabalho atualizado com master: a rais da branch sera master e o trabalho sera adaptado.

Para restaurar a situação initial em caso de problema:

git rebase --abort # Se rebase em curso
git checkout <branch>
git reset --hard <branch_save>

Se você está satisfeito do resultado: apaga a salvaguarda:

git branch -D <branch_save>

///////////////////////////////////////////////////////////////////////////

Criar branch apartir de outro

git checkout -b feature4 develop // branch feature4 apartir de develop

///////////////////








